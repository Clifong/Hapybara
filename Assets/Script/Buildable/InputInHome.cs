//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Script/Buildable/InputInHome.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameInput
{
    public partial class @InputInHome: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputInHome()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputInHome"",
    ""maps"": [
        {
            ""name"": ""Input"",
            ""id"": ""67a2c4a4-167c-4179-ae3b-e947b872f8a8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e0e2579a-e8f3-4bdd-b2e1-ffd089e14bc4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PerformAction"",
                    ""type"": ""Button"",
                    ""id"": ""acce3e8d-a980-4a0c-a0b3-d16b4f9551fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""2132ea3a-7fe9-432b-8497-c241a626be8a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CancelAction"",
                    ""type"": ""Button"",
                    ""id"": ""0da21627-e17c-46b2-aee0-af0585230472"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextItem"",
                    ""type"": ""Button"",
                    ""id"": ""45b94c28-bbd9-4507-847e-037fad473986"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12e552a1-92d9-4a00-aab8-0573326ec01d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PerformAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb1e986a-df07-4f34-a95f-d7b8cd7f57d0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9457152d-731d-4003-ba60-b5f3d304ac76"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e77a8568-2b30-4a1f-b0ea-b14d04e44b08"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a7a6f67d-bebc-49ac-82ab-a71b4b858175"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""62040446-8f94-47f4-aa88-bd22ec5b640c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""34527075-1d8e-43ad-9ef3-b09e3f9994b8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f0903e5c-c4d2-4bb4-9f8a-7bfa8621cdee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7eb98de4-a3f3-4de6-8f2d-1c9299359130"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Input
            m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
            m_Input_Move = m_Input.FindAction("Move", throwIfNotFound: true);
            m_Input_PerformAction = m_Input.FindAction("PerformAction", throwIfNotFound: true);
            m_Input_MousePosition = m_Input.FindAction("MousePosition", throwIfNotFound: true);
            m_Input_CancelAction = m_Input.FindAction("CancelAction", throwIfNotFound: true);
            m_Input_NextItem = m_Input.FindAction("NextItem", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Input
        private readonly InputActionMap m_Input;
        private List<IInputActions> m_InputActionsCallbackInterfaces = new List<IInputActions>();
        private readonly InputAction m_Input_Move;
        private readonly InputAction m_Input_PerformAction;
        private readonly InputAction m_Input_MousePosition;
        private readonly InputAction m_Input_CancelAction;
        private readonly InputAction m_Input_NextItem;
        public struct InputActions
        {
            private @InputInHome m_Wrapper;
            public InputActions(@InputInHome wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Input_Move;
            public InputAction @PerformAction => m_Wrapper.m_Input_PerformAction;
            public InputAction @MousePosition => m_Wrapper.m_Input_MousePosition;
            public InputAction @CancelAction => m_Wrapper.m_Input_CancelAction;
            public InputAction @NextItem => m_Wrapper.m_Input_NextItem;
            public InputActionMap Get() { return m_Wrapper.m_Input; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
            public void AddCallbacks(IInputActions instance)
            {
                if (instance == null || m_Wrapper.m_InputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InputActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @PerformAction.started += instance.OnPerformAction;
                @PerformAction.performed += instance.OnPerformAction;
                @PerformAction.canceled += instance.OnPerformAction;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @CancelAction.started += instance.OnCancelAction;
                @CancelAction.performed += instance.OnCancelAction;
                @CancelAction.canceled += instance.OnCancelAction;
                @NextItem.started += instance.OnNextItem;
                @NextItem.performed += instance.OnNextItem;
                @NextItem.canceled += instance.OnNextItem;
            }

            private void UnregisterCallbacks(IInputActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @PerformAction.started -= instance.OnPerformAction;
                @PerformAction.performed -= instance.OnPerformAction;
                @PerformAction.canceled -= instance.OnPerformAction;
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @CancelAction.started -= instance.OnCancelAction;
                @CancelAction.performed -= instance.OnCancelAction;
                @CancelAction.canceled -= instance.OnCancelAction;
                @NextItem.started -= instance.OnNextItem;
                @NextItem.performed -= instance.OnNextItem;
                @NextItem.canceled -= instance.OnNextItem;
            }

            public void RemoveCallbacks(IInputActions instance)
            {
                if (m_Wrapper.m_InputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInputActions instance)
            {
                foreach (var item in m_Wrapper.m_InputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InputActions @Input => new InputActions(this);
        public interface IInputActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnPerformAction(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
            void OnCancelAction(InputAction.CallbackContext context);
            void OnNextItem(InputAction.CallbackContext context);
        }
    }
}
